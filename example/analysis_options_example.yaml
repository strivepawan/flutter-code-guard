# Example analysis_options.yaml for Flutter Code Guard
# This file shows how to configure Dart analysis rules that Flutter Code Guard will respect

include: package:flutter_lints/flutter.yaml

analyzer:
  # Strong mode settings
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  
  # Error level customization
  errors:
    # Treat unused imports as warnings instead of info
    unused_import: warning
    # Treat dead code as info instead of warning
    dead_code: info
    # Treat missing required parameters as errors
    missing_required_param: error
    # Ignore certain analyzer issues
    invalid_annotation_target: ignore
  
  # Exclude certain directories from analysis
  exclude:
    - build/**
    - .dart_tool/**
    - **/*.g.dart
    - **/*.freezed.dart

linter:
  rules:
    # Style rules
    - camel_case_types
    - camel_case_extensions
    - file_names
    - non_constant_identifier_names
    
    # Documentation rules
    - public_member_api_docs
    - comment_references
    
    # Usage rules
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_final_locals
    - prefer_final_fields
    - prefer_final_in_for_each
    
    # Error prone rules
    - avoid_print
    - avoid_unnecessary_containers
    - avoid_web_libraries_in_flutter
    - no_duplicate_case_values
    - no_logic_in_create_state
    - prefer_void_to_null
    
    # Performance rules
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    
    # Pub rules
    - sort_pub_dependencies

# Usage with Flutter Code Guard:
# 1. Place this file in your project root as analysis_options.yaml
# 2. Run: flutter_code_guard
# 3. Flutter Code Guard will respect all these rules and configurations
# 4. Use --watch mode to get real-time feedback as you code